
import telebot

import array

###############################################################################################################
###############################################################################################################
###############################################################################################################


def Count(mass):

    n = 0

    for x in mass:

        n += 1

    return n

###############################################################################################################
###############################################################################################################
###############################################################################################################

def FindSongs(mass, artist):

    songs = []

    for x in mass:

        if x[0] == artist:

            songs.append(x[1])

    return songs

###############################################################################################################
###############################################################################################################
###############################################################################################################

def SetMarkup(mass, artist):

    markup = telebot.types.ReplyKeyboardMarkup(True, False)

    i = 0

    markup.row('Исполнители','✖')

    while i < Count(FindSongs(mass, artist)):

        if i + 1 < Count(FindSongs(mass, artist)):

            markup.row(FindSongs(mass, artist)[i], FindSongs(mass, artist)[i + 1])

        else:

            markup.row(FindSongs(mass, artist)[i])

        i += 2

    return markup

###############################################################################################################
###############################################################################################################
###############################################################################################################

def SetMarkupArtists(mass):

    ###find all artists

    i = 1

    artists = []

    while i < Count(mass):

        j = 0

        while j < Count(artists):

            if mass[i][0] != artists[j]:

                check = True

            else:

                check = False

                break

            j += 1

        if check:

            artists.append(mass[i][0])

        i += 1

    ###fill_up

    markup = []

    i = 0

    while i < Count(artists):

        j = 1

        markup.append([artists[i]])

        while j <= FindSongs(mass, artists[i]):

            markup[i].append(FindSongs(mass, artists[i])[j])

            j += 1

    i += 1

    return markup

###############################################################################################################
###############################################################################################################
###############################################################################################################

def Artists(mass):

    i = 1

    artists = []

    while i < Count(mass):

        j = 0

        while j < Count(artists):

            if mass[i][0] == artists[j]:

                break

            j += 1

        if j == Count(artists):

            artists.append(mass[i][0])

        i += 1

    return artists

###############################################################################################################
###############################################################################################################
###############################################################################################################

def SetMarkupArtists(artists):

    markup = telebot.types.ReplyKeyboardMarkup(True, False)

    i = 0

    markup.row('✖')

    while i < Count(artists):

        markup.row(artists[i])

        i += 1

    return markup

###############################################################################################################
###############################################################################################################
###############################################################################################################

def Check(mass, el):

    i = 0

    check = False

    while i < Count(mass):

        if mass[i] == el:

            check = True

        i += 1

    return check

###############################################################################################################
###############################################################################################################
###############################################################################################################


def exchange(mass, n, m):

    k = mass[n]

    mass[n] = mass[m]

    mass[m] = k


###############################################################################################################
###############################################################################################################
###############################################################################################################

def Shaker(mass, key):

        u = 1

        k = Count(mass) - 1;

        j = 1

        while j < Count(mass):

            i = u

            while i < k:

                if mass[i + 1][key] < mass[i][key]:

                    exchange(mass, i + 1, i)

                i += 1

            k -= 1

            i = k - 1

            while i >= u:

                if mass[i + 1][key] < mass[i][key]:

                    exchange(mass, i + 1, i)

                i -= 1

            u += 1

            j += 1

        return mass
###############################################################################################################
###############################################################################################################
###############################################################################################################


def Substring(str, i, n):

    substring = ''

    j = 0

    while j + i < n and j + i < Count(str):

        substring += str[j + i]

        j += 1

    return substring

###############################################################################################################
###############################################################################################################
###############################################################################################################


def Sub(str):

    i = 0

    sub = ['','']

    while str[i] != '-':

        i += 1

    sub[0] = Substring(str, 0, i - 1)

    sub[1] = Substring(str, i + 2, Count(str))

    return sub


###############################################################################################################
###############################################################################################################
###############################################################################################################

def SortMusic(mass):

    u = 1

    k = Count(mass) - 1;

    j = 1

    while j < Count(mass):

        i = u

        while i < k:

            if mass[i + 1][0] < mass[i][0] or mass[i + 1][0] == mass[i][0] and mass[i + 1][1] < mass[i][1]:
                exchange(mass, i + 1, i)

            i += 1

        k -= 1

        i = k - 1

        while i >= u:

            if mass[i + 1][0] < mass[i][0] or (mass[i + 1][0] == mass[i][0] and mass[i + 1][1] < mass[i][1]):

                exchange(mass, i + 1, i)

            i -= 1

        u += 1

        j += 1

###############################################################################################################
###############################################################################################################
###############################################################################################################

def SongsMarkup(mass):

    markup = telebot.types.ReplyKeyboardMarkup(True, False)

    i = 1

    markup.row('Исполнители','✖')

    while i < Count(mass):

        markup.row(mass[i][0] + ' - ' + mass[i][1])

        i += 1

    return markup

###############################################################################################################
###############################################################################################################
###############################################################################################################

def ToLines(str):
    Lines =[]
    g = ''
    for i in str:
        if i == '\n':
            Lines.append(g)
            g = ''
        else:
            g += i
    return Lines

def ReadSongs(file):
    music_array = [['artist', 'song', 'lyrics']]
    CheckFPart = False
    CheckSPart = False
    lines = ToLines(file.read())
    i = 0
    j = 0
    lyrics = ''
    while i < Count(lines):
        if lines[i] == '##':
            CheckFPart = True
        elif CheckFPart:
            ArtistSong = Sub(lines[i])
            music_array.append([ArtistSong[0], ArtistSong[1]])
            j += 1
            CheckFPart = False
        if lines[i] == '#':
            CheckSPart = True
        elif CheckSPart:
            lyrics = lyrics + lines[i] + '\n'
        if i + 1 < Count(lines):
            if lines[i + 1] == '##':
                music_array[j].append(lyrics)
                CheckSPart = False
                lyrics = ''
        i += 1
    return music_array